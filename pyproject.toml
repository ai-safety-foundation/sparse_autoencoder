[tool.poetry]
    authors=["Alan Cooney <41682961+alan-cooney@users.noreply.github.com>"]
    description="Sparse Autoencoder for Mechanistic Interpretability"
    include=["sparse_autoencoder"]
    license="MIT"
    name="sparse_autoencoder"
    readme="README.md"
    version="0.0.0"

    [tool.poetry.dependencies]
        einops=">=0.6"
        python=">=3.10, <3.12"
        torch=">=2.1"
        wandb=">=0.15.12"
        zstandard="^0.22.0"    # Required for downloading datasets such as The Pile

    [tool.poetry.group]
        [tool.poetry.group.dev.dependencies]
            jupyter=">=1"
            plotly=">=5"
            poethepoet=">=0.24.2"
            pre-commit=">=3.5.0"
            pyright=">=1.1.334"
            pytest=">=7"
            pytest-cov=">=4"
            ruff=">=0.1.4"

        [tool.poetry.group.demos.dependencies]
            jupyterlab=">=3"
            pandas=">=2.1.2"
            tokenizers=">=0.13.0, <0.14.0"   # See https://github.com/neelnanda-io/TransformerLens/issues/404
            transformer-lens=">=1.9.0"
            transformers=">=4.33.1, <4.34.0" # See https://github.com/neelnanda-io/TransformerLens/issues/404

[tool.poe.tasks]
    [tool.poe.tasks.check]
        help="Run all checks"
        ignore_fail=false
        sequence=["checklock", "format", "lint", "test", "typecheck"]

    [tool.poe.tasks.format]
        cmd="ruff format sparse_autoencoder"
        help="Format code using Ruff (with autofix enabled)"

    [tool.poe.tasks.lint]
        cmd="ruff check sparse_autoencoder --fix"
        help="Lint code using Ruff (with autofix enabled)"

    [tool.poe.tasks.ruff]
        help="  [alias for lint && format]"
        ignore_fail=false
        sequence=["format", "lint"]

    [tool.poe.tasks.checklock]
        cmd="poetry check"
        help="Check that the lockfile is up to date"

    [tool.poe.tasks.precommit]
        cmd="pre-commit run --all-files"
        help="Run pre-commit hooks"

    [tool.poe.tasks.test]
        cmd="pytest"
        help="Run tests using PyTest"

    [tool.poe.tasks.pytest]
        help="  [alias for test]"
        sequence=["test"]

    [tool.poe.tasks.typecheck]
        cmd="pyright"
        help="Typecheck code using PyRight"

    [tool.poe.tasks.pyright]
        help="  [alias for typecheck]"
        sequence=["typecheck"]

[build-system]
    build-backend="poetry.core.masonry.api"
    requires=["poetry-core"]

[tool.pytest]
    cache_dir=".cache/pytest"

    [tool.pytest.ini_options]
        addopts="""--jaxtyping-packages=sparse_autoencoder,beartype.beartype --doctest-modules"""

[tool.ruff]
    cache-dir=".cache/ruff"
    exclude=["*/snapshots/", "/.venv"]
    ignore=[
        "ANN101", # self type annotation (it's inferred)
        "F722",   # Forward annotations check (conflicts with jaxtyping)
        "FA102",  # Annotations support (Python >= 3.9 is fine)
        "FIX002", # TODO issue link (overkill)
        "INP001", # __init__.py for all packages (Python >= 3.3 is fine)
        "PGH003", # No general type: ignore (not supported with pyright)
        "TCH002", # Type checking imports (conflicts with beartype)
        "TD00",   # TODO banned (we're in alpha)
        # Rules that conflict with ruff format
        "COM812",
        "ISC001",
    ]
    ignore-init-module-imports=true
    line-length=100
    select=["ALL"]

    [tool.ruff.lint]
        [tool.ruff.lint.flake8-annotations]
            mypy-init-return=true

        [tool.ruff.lint.isort]
            force-sort-within-sections=true
            lines-after-imports=2

        [tool.ruff.lint.per-file-ignores]
            "**/tests/*"=[
                "ARG001", # Fixtures often have unused arguments
                "PT004",  # Fixtures don't return anything
                "S101",   # Assert is needed in PyTest
            ]

        [tool.ruff.lint.pydocstyle]
            convention="google"

        [tool.ruff.lint.pylint]
            max-args=10

[tool.pyright]
    # All rules apart from base are shown explicitly below
    deprecateTypingAliases=true
    disableBytesTypePromotions=true
    include=["sparse_autoencoder"]
    reportAssertAlwaysTrue=true
    reportConstantRedefinition=true
    reportDeprecated=true
    reportDuplicateImport=true
    reportFunctionMemberAccess=true
    reportGeneralTypeIssues=true
    reportIncompatibleMethodOverride=true
    reportIncompatibleVariableOverride=true
    reportIncompleteStub=true
    reportInconsistentConstructor=true
    reportInvalidStringEscapeSequence=true
    reportInvalidStubStatement=true
    reportInvalidTypeVarUse=true
    reportMatchNotExhaustive=true
    reportMissingParameterType=true
    reportMissingTypeArgument=false
    reportMissingTypeStubs=false
    reportOptionalCall=true
    reportOptionalContextManager=true
    reportOptionalIterable=true
    reportOptionalMemberAccess=true
    reportOptionalOperand=true
    reportOptionalSubscript=true
    reportOverlappingOverload=true
    reportPrivateImportUsage=true
    reportPrivateUsage=true
    reportSelfClsParameterName=true
    reportTypeCommentUsage=true
    reportTypedDictNotRequiredAccess=true
    reportUnboundVariable=true
    reportUnknownArgumentType=false
    reportUnknownLambdaType=true
    reportUnknownMemberType=false
    reportUnknownParameterType=false
    reportUnknownVariableType=false
    reportUnnecessaryCast=true
    reportUnnecessaryComparison=true
    reportUnnecessaryContains=true
    reportUnnecessaryIsInstance=true
    reportUnsupportedDunderAll=true
    reportUntypedBaseClass=true
    reportUntypedClassDecorator=true
    reportUntypedFunctionDecorator=true
    reportUntypedNamedTuple=true
    reportUnusedClass=true
    reportUnusedCoroutine=true
    reportUnusedExpression=true
    reportUnusedFunction=true
    reportUnusedImport=true
    reportUnusedVariable=true
    reportWildcardImportFromLibrary=true
    strictDictionaryInference=true
    strictListInference=true
    strictParameterNoneValue=true
    strictSetInference=true
